import e from"unist-util-visit";import t from"giphy-api";"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var r=function(e,t,r){try{return Promise.resolve(fetch("https://giphy.com/services/oembed?url="+t.embed_url).then(function(e){if(!e.ok)throw new Error("Request to giphy oembed for "+t.embed_url+" return non-OK");return e.json()})).then(function(n){var o=Math.round(n.height/n.width*100);return e.type="html",e.children=void 0,e.value='<div style="width:'+r+";height:0;padding-bottom:"+o+'%;position:relative;"><iframe src="'+t.embed_url+'" width="100%" height="100%" style="position:absolute" frameborder="0" class="giphy-embed" allowfullscreen></iframe></div>',e})}catch(e){return Promise.reject(e)}};export default function(n,o){var i=n.cache,a=n.markdownAST;try{var u=[],l=t({apiKey:o.giphyApiKey,https:!0}),s=o.embedWidth||"100%";return e(a,"image",function(e){var t=e.url;t.startsWith("giphy:")&&u.push(function(){try{var n=t.replace(/^giphy:/,"");return Promise.resolve(i.get(n)).then(function(t){function a(n){var i=function(){if(o.useIframe)return Promise.resolve(r(e,t[0],s)).then(function(t){e=t});e=o.useVideo?function(e,r,n){var o="<source src="+t[0].images.looping.mp4+' type="video/mp4" />';return e.type="html",e.children=void 0,e.value='<video style="margin: auto auto; display: block; max-width: '+n+'" autoplay loop muted playsinline>\n            '+o+"\n        </video>",e}(e,0,s):function(e,t){var r=e.url.replace(/^giphy:/,"");return e.alt=r,e.url=t.images.downsized_large.url,e.title=e.title||r,e}(e,t[0])}();if(i&&i.then)return i.then(function(){})}var u=function(){if(!t)return function(e,r){try{var o=Promise.resolve(l.search(n)).then(function(e){t=e.data,i.set(n,e.data)})}catch(e){return r(e)}return o&&o.then?o.then(void 0,r):o}(0,function(e){throw e.message="The following error appeared while searching Giphy for "+n+":\n\n"+e.message,e})}();return u&&u.then?u.then(a):a()})}catch(e){return Promise.reject(e)}})}),Promise.resolve(Promise.all(u.map(function(e){return e()}))).then(function(){return a})}catch(e){return Promise.reject(e)}}
//# sourceMappingURL=index.mjs.map
